diff --git a/node_modules/react-native-auth0/src/hooks/Auth0Context.ts b/node_modules/react-native-auth0/src/hooks/Auth0Context.ts
index ed8409a..a0da987 100644
--- a/node_modules/react-native-auth0/src/hooks/Auth0Context.ts
+++ b/node_modules/react-native-auth0/src/hooks/Auth0Context.ts
@@ -1,24 +1,24 @@
 import { createContext } from 'react';
 import type {
-  Credentials,
-  User,
-  WebAuthorizeParameters,
   ClearSessionParameters,
-  PasswordRealmParameters,
-  ExchangeParameters,
   CreateUserParameters,
-  PasswordlessEmailParameters,
+  Credentials,
+  ExchangeNativeSocialParameters,
+  ExchangeParameters,
   LoginEmailParameters,
-  PasswordlessSmsParameters,
-  LoginSmsParameters,
-  MfaChallengeParameters,
   LoginOobParameters,
   LoginOtpParameters,
   LoginRecoveryCodeParameters,
-  ExchangeNativeSocialParameters,
-  RevokeOptions,
-  ResetPasswordParameters,
+  LoginSmsParameters,
+  MfaChallengeParameters,
   MfaChallengeResponse,
+  PasswordlessEmailParameters,
+  PasswordlessSmsParameters,
+  PasswordRealmParameters,
+  ResetPasswordParameters,
+  RevokeOptions,
+  User,
+  WebAuthorizeParameters,
 } from '../types';
 import type { NativeAuthorizeOptions } from '../types/platform-specific';
 import type { AuthState } from './reducer';
@@ -57,6 +57,15 @@ export interface Auth0ContextInterface extends AuthState {
    */
   getCredentials(scope?: string, minTtl?: number): Promise<Credentials>;
 
+  /**
+   * Clears the user's credentials without clearing their web session and logs them out.
+   *
+   * @remarks
+   * **Platform specific:** This method is only available in the context of a Android/iOS application.
+   * @returns A promise that resolves when the credentials have been cleared.
+   */
+  clearCredentials: () => Promise<void>;
+
   /**
    * Checks if a valid, non-expired set of credentials exists in storage.
    * This is a quick, local check and does not perform a network request.
@@ -200,6 +209,7 @@ const initialContext: Auth0ContextInterface = {
   authorize: stub,
   clearSession: stub,
   getCredentials: stub,
+  clearCredentials: stub,
   hasValidCredentials: stub,
   loginWithPasswordRealm: stub,
   cancelWebAuth: stub,
diff --git a/node_modules/react-native-auth0/src/hooks/Auth0Provider.tsx b/node_modules/react-native-auth0/src/hooks/Auth0Provider.tsx
index 3eed94a..f9a18d2 100644
--- a/node_modules/react-native-auth0/src/hooks/Auth0Provider.tsx
+++ b/node_modules/react-native-auth0/src/hooks/Auth0Provider.tsx
@@ -1,35 +1,35 @@
-import { useEffect, useReducer, useMemo, useCallback } from 'react';
 import type { PropsWithChildren } from 'react';
-import { Auth0Context, type Auth0ContextInterface } from './Auth0Context';
-import { reducer } from './reducer';
+import { useCallback, useEffect, useMemo, useReducer } from 'react';
+import { Auth0User, AuthError } from '../core/models';
+import Auth0 from '../index';
 import type {
   Auth0Options,
-  Credentials,
-  User,
-  PasswordRealmParameters,
-  WebAuthorizeParameters,
   ClearSessionParameters,
   CreateUserParameters,
+  Credentials,
+  ExchangeNativeSocialParameters,
   ExchangeParameters,
-  PasswordlessEmailParameters,
   LoginEmailParameters,
-  PasswordlessSmsParameters,
-  LoginSmsParameters,
-  MfaChallengeParameters,
   LoginOobParameters,
   LoginOtpParameters,
   LoginRecoveryCodeParameters,
-  ExchangeNativeSocialParameters,
-  RevokeOptions,
-  ResetPasswordParameters,
+  LoginSmsParameters,
+  MfaChallengeParameters,
   MfaChallengeResponse,
+  PasswordlessEmailParameters,
+  PasswordlessSmsParameters,
+  PasswordRealmParameters,
+  ResetPasswordParameters,
+  RevokeOptions,
+  User,
+  WebAuthorizeParameters,
 } from '../types';
 import type {
   NativeAuthorizeOptions,
   NativeClearSessionOptions,
 } from '../types/platform-specific';
-import { Auth0User, AuthError } from '../core/models';
-import Auth0 from '../index';
+import { Auth0Context, type Auth0ContextInterface } from './Auth0Context';
+import { reducer } from './reducer';
 
 export const Auth0Provider = ({
   children,
@@ -170,6 +170,17 @@ export const Auth0Provider = ({
     [client]
   );
 
+  const clearCredentials = useCallback(async (): Promise<void> => {
+    try {
+      await client.credentialsManager.clearCredentials();
+      dispatch({ type: 'LOGOUT_COMPLETE' });
+    } catch (e) {
+      const error = e as AuthError;
+      dispatch({ type: 'ERROR', error });
+      throw error;
+    }
+  }, [client]);
+
   const cancelWebAuth = useCallback(
     () => voidFlow(client.webAuth.cancelWebAuth()),
     [client, voidFlow]
@@ -280,6 +291,7 @@ export const Auth0Provider = ({
       authorize,
       clearSession,
       getCredentials,
+      clearCredentials,
       hasValidCredentials,
       cancelWebAuth,
       loginWithPasswordRealm,
@@ -302,6 +314,7 @@ export const Auth0Provider = ({
       authorize,
       clearSession,
       getCredentials,
+      clearCredentials,
       hasValidCredentials,
       cancelWebAuth,
       loginWithPasswordRealm,
