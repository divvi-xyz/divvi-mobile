name: E2E - iOS
on:
  workflow_call:
    inputs:
      ios-version:
        required: true
        type: string

jobs:
  ios:
    env:
      # `if` conditions can't directly access secrets, so we use a workaround
      # See https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow
      SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
      BASH_ENV: ~/.profile
    name: iOS (${{ inputs.ios-version  }})
    runs-on: ios-e2e-group
    steps:
      - uses: google-github-actions/auth@v2
        if: ${{ env.SECRETS_AVAILABLE }}
        with:
          project_id: celo-mobile-mainnet
          credentials_json: ${{ secrets.MAINNET_SERVICE_ACCOUNT_KEY }}
      - name: Google Secrets
        if: ${{ env.SECRETS_AVAILABLE }}
        id: google-secrets
        uses: google-github-actions/get-secretmanager-secrets@v2.2.2
        with:
          secrets: |-
            EMERGE_API_TOKEN:projects/1027349420744/secrets/EMERGE_API_TOKEN
            E2E_WALLET_CONNECT_PROJECT_ID:projects/1027349420744/secrets/E2E_WALLET_CONNECT_PROJECT_ID
            E2E_DEFAULT_RECIPIENT_MNEMONIC:projects/1027349420744/secrets/E2E_DEFAULT_RECIPIENT_MNEMONIC
            E2E_DEFAULT_RECIPIENT_PRIVATE_KEY:projects/1027349420744/secrets/E2E_DEFAULT_RECIPIENT_PRIVATE_KEY
            E2E_WALLET_MNEMONIC:projects/1027349420744/secrets/E2E_WALLET_MNEMONIC
            E2E_WALLET_PRIVATE_KEY:projects/1027349420744/secrets/E2E_WALLET_PRIVATE_KEY
            E2E_WALLET_SINGLE_VERIFIED_MNEMONIC:projects/1027349420744/secrets/E2E_WALLET_SINGLE_VERIFIED_MNEMONIC
            E2E_WALLET_MULTIPLE_VERIFIED_MNEMONIC:projects/1027349420744/secrets/E2E_WALLET_MULTIPLE_VERIFIED_MNEMONIC
            E2E_WALLET_12_WORDS_MNEMONIC:projects/1027349420744/secrets/E2E_WALLET_12_WORDS_MNEMONIC
      - uses: actions/checkout@v4
      - uses: ./.github/actions/yarn-install
      - name: Install Ruby dependencies
        run: bundle install --path vendor/bundle
      - name: Fail if someone forgot to commit "Gemfile.lock"
        run: git diff --exit-code
      # This way cocoapods and other installed gems from the Gemfile can be found without using `bundle exec`
      - name: Add installed Gems binaries to PATH
        run: echo "$(ruby -e 'puts Gem.bindir')" >> $GITHUB_PATH
      - name: Check E2E wallet balance
        run: NODE_OPTIONS='--unhandled-rejections=strict' yarn ts-node ./e2e/scripts/check-e2e-wallet-balance.ts
        working-directory: example
      - name: Prebuild
        run: yarn run e2e:prebuild
        working-directory: example
      - name: Create Detox Build
        run: yarn run e2e:build:ios-release
        working-directory: example
      - name: Upload Detox Build to Emerge
        if: |
          env.SECRETS_AVAILABLE
            && (github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'merge_group')
        # This step is not critical, so we continue on error
        continue-on-error: true
        run: yarn ts-node .github/scripts/uploadE2eBuildToEmerge.ts
        env:
          EMERGE_API_TOKEN: ${{ steps.google-secrets.outputs.EMERGE_API_TOKEN }}
          DETOX_CONFIG: ios.release
      - name: Run Detox
        run: >
          yarn detox test
          --configuration ios.release.${{ inputs.ios-version }}
          --artifacts-location e2e/artifacts
          --take-screenshots=failing
          --record-videos=failing
          --record-logs=failing
          --loglevel info
          --debug-synchronization 10000
          --maxWorkers 6
          --retries 3
        working-directory: example
        timeout-minutes: 45
        env:
          E2E_WALLET_CONNECT_PROJECT_ID: ${{ steps.google-secrets.outputs.E2E_WALLET_CONNECT_PROJECT_ID }}
          E2E_DEFAULT_RECIPIENT_MNEMONIC: ${{ steps.google-secrets.outputs.E2E_DEFAULT_RECIPIENT_MNEMONIC }}
          E2E_DEFAULT_RECIPIENT_PRIVATE_KEY: ${{ steps.google-secrets.outputs.E2E_DEFAULT_RECIPIENT_PRIVATE_KEY }}
          E2E_WALLET_MNEMONIC: ${{ steps.google-secrets.outputs.E2E_WALLET_MNEMONIC }}
          E2E_WALLET_PRIVATE_KEY: ${{ steps.google-secrets.outputs.E2E_WALLET_PRIVATE_KEY }}
          E2E_WALLET_SINGLE_VERIFIED_MNEMONIC: ${{ steps.google-secrets.outputs.E2E_WALLET_SINGLE_VERIFIED_MNEMONIC }}
          E2E_WALLET_MULTIPLE_VERIFIED_MNEMONIC: ${{ steps.google-secrets.outputs.E2E_WALLET_MULTIPLE_VERIFIED_MNEMONIC }}
          E2E_WALLET_12_WORDS_MNEMONIC: ${{ steps.google-secrets.outputs.E2E_WALLET_12_WORDS_MNEMONIC }}
      # Disabled for now, as the reports are sent to the wrong build
      # See https://github.com/mikepenz/action-junit-report/issues/40
      # - name: Publish iOS JUnit Report
      #   if: always()
      #   uses: mikepenz/action-junit-report@v4
      #   with:
      #     check_name: iOS (${{ inputs.ios-version }}) e2e Test Report
      #     report_paths: 'e2e/test-results/junit.xml'
      - name: 'Upload iOS E2E Artifacts'
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ inputs.ios-version }}-e2e-artifact
          path: example/e2e/artifacts
      - name: 'Upload iOS E2E HTML Report'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ inputs.ios-version }}-test-report
          path: example/e2e/test-results
      - name: 'Close simulators'
        if: always()
        run: xcrun simctl shutdown all
