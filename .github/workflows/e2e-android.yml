name: E2E - Android
on:
  workflow_call:
    inputs:
      android-api-level:
        required: true
        type: number

jobs:
  android:
    env:
      # `if` conditions can't directly access secrets, so we use a workaround
      # See https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow
      SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
      BASH_ENV: ~/.profile
    name: Android (SDK ${{ inputs.android-api-level }})
    runs-on:
      - nscloud-ubuntu-22.04-amd64-16x64-with-cache
      - nscloud-cache-size-20gb
      - nscloud-cache-tag-divvi-e2e-android
    # We pay by the minute.
    # If it takes longer it usually fails, so no need to pay for more
    timeout-minutes: 30
    steps:
      - uses: google-github-actions/auth@v2
        if: ${{ env.SECRETS_AVAILABLE }}
        with:
          project_id: celo-mobile-mainnet
          credentials_json: ${{ secrets.MAINNET_SERVICE_ACCOUNT_KEY }}
      - name: Google Secrets
        if: ${{ env.SECRETS_AVAILABLE }}
        id: google-secrets
        uses: google-github-actions/get-secretmanager-secrets@v2.2.2
        with:
          secrets: |-
            E2E_WALLET_CONNECT_PROJECT_ID:projects/1027349420744/secrets/E2E_WALLET_CONNECT_PROJECT_ID
            E2E_DEFAULT_RECIPIENT_MNEMONIC:projects/1027349420744/secrets/E2E_DEFAULT_RECIPIENT_MNEMONIC
            E2E_DEFAULT_RECIPIENT_PRIVATE_KEY:projects/1027349420744/secrets/E2E_DEFAULT_RECIPIENT_PRIVATE_KEY
            E2E_WALLET_MNEMONIC:projects/1027349420744/secrets/E2E_WALLET_MNEMONIC
            E2E_WALLET_PRIVATE_KEY:projects/1027349420744/secrets/E2E_WALLET_PRIVATE_KEY
            E2E_WALLET_SINGLE_VERIFIED_MNEMONIC:projects/1027349420744/secrets/E2E_WALLET_SINGLE_VERIFIED_MNEMONIC
            E2E_WALLET_MULTIPLE_VERIFIED_MNEMONIC:projects/1027349420744/secrets/E2E_WALLET_MULTIPLE_VERIFIED_MNEMONIC
            E2E_WALLET_12_WORDS_MNEMONIC:projects/1027349420744/secrets/E2E_WALLET_12_WORDS_MNEMONIC
      - uses: actions/checkout@v4
      - name: Set env
        run: |
          ANDROID_HOME="$HOME/android-tools"
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH
          echo "ANDROID_SDK_ROOT=" >> $GITHUB_ENV
      # See https://namespace.so/docs/actions/nscloud-cache-action
      - name: Cache
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          cache: gradle
          path: ${{ env.ANDROID_HOME}}
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: ./.github/actions/yarn-install
      - name: Prebuild
        run: yarn run e2e:prebuild
        working-directory: apps/example
      - name: Store compileSdkVersion in env
        run: |
          # Read compile SDK version directly from React Native's version catalog
          # This is the actual source of truth and is instantaneous (~0.01 seconds)
          # Fails fast if the file doesn't exist so we know to fix it
          # NOTE: The most correct but slow method would be:
          # cd apps/example/android && ./gradlew properties -q | grep '^compileSdkVersion:' | cut -d' ' -f2
          COMPILE_SDK=$(grep '^compileSdk = ' node_modules/react-native/gradle/libs.versions.toml | cut -d'"' -f2)
          if [[ -z "$COMPILE_SDK" ]]; then
            echo "ERROR: Could not extract compileSdk version"
            exit 1
          fi
          echo "ANDROID_COMPILE_SDK_VERSION=$COMPILE_SDK" >> $GITHUB_ENV
      - name: Setup runner
        run: |
          set -x

          mkdir -p $ANDROID_HOME

          curl https://dl.google.com/android/repository/commandlinetools-linux-6858069_latest.zip -o cli-tools.zip
          unzip cli-tools.zip -d "$ANDROID_HOME/cmdline-tools"
          # Command line tools need to be placed in $ANDROID_HOME/cmdline-tools/latest to function properly
          # and because we cache $ANDROID_HOME, we need remove the existing version and move the new one
          rm -rf "$ANDROID_HOME/cmdline-tools/latest"
          mv "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/latest"

          # Temporarily disable checking for EPIPE error and use yes to accept all licenses
          set +o pipefail
          yes | sdkmanager --licenses
          set -o pipefail

          # Install Android SDK
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_COMPILE_SDK_VERSION }}"

          # Install Ninja
          sudo apt-get update -y
          sudo apt-get install ninja-build

          # Allow the emulator to use /dev/kvm
          sudo adduser $USER kvm
          sudo chown $USER /dev/kvm
        shell: bash
      - name: Setup emulator
        run: >
          yarn ts-node ./.github/scripts/setupAndroidEmulator.ts
          --image "system-images;android-${{ inputs.android-api-level }};default;x86_64"
          --emulatorName Pixel_API_${{ inputs.android-api-level }}_AOSP_x86_64
      - name: Check E2E wallet balance
        run: NODE_OPTIONS='--unhandled-rejections=strict' yarn ts-node ./e2e/scripts/check-e2e-wallet-balance.ts
        working-directory: apps/example
      - name: Create Detox Build
        run: yarn run e2e:build:android-release
        working-directory: apps/example
      - name: Run Detox
        run: >
          yarn detox test
          --device-name Pixel_API_${{ inputs.android-api-level }}_AOSP_x86_64
          --configuration android.release
          --artifacts-location e2e/artifacts
          --take-screenshots=failing
          --record-videos=failing
          --record-logs=failing
          --loglevel info
          --debug-synchronization 10000
          --maxWorkers 12
          --headless
          --retries 3
          --device-boot-args="-snapshot ci_boot"
        working-directory: apps/example
        env:
          E2E_WALLET_CONNECT_PROJECT_ID: ${{ steps.google-secrets.outputs.E2E_WALLET_CONNECT_PROJECT_ID }}
          E2E_DEFAULT_RECIPIENT_MNEMONIC: ${{ steps.google-secrets.outputs.E2E_DEFAULT_RECIPIENT_MNEMONIC }}
          E2E_DEFAULT_RECIPIENT_PRIVATE_KEY: ${{ steps.google-secrets.outputs.E2E_DEFAULT_RECIPIENT_PRIVATE_KEY }}
          E2E_WALLET_MNEMONIC: ${{ steps.google-secrets.outputs.E2E_WALLET_MNEMONIC }}
          E2E_WALLET_PRIVATE_KEY: ${{ steps.google-secrets.outputs.E2E_WALLET_PRIVATE_KEY }}
          E2E_WALLET_SINGLE_VERIFIED_MNEMONIC: ${{ steps.google-secrets.outputs.E2E_WALLET_SINGLE_VERIFIED_MNEMONIC }}
          E2E_WALLET_MULTIPLE_VERIFIED_MNEMONIC: ${{ steps.google-secrets.outputs.E2E_WALLET_MULTIPLE_VERIFIED_MNEMONIC }}
          E2E_WALLET_12_WORDS_MNEMONIC: ${{ steps.google-secrets.outputs.E2E_WALLET_12_WORDS_MNEMONIC }}
      # Disabled for now, as the reports are sent to the wrong build
      # See https://github.com/mikepenz/action-junit-report/issues/40
      # - name: Publish Android JUnit Report
      #   if: always()
      #   uses: mikepenz/action-junit-report@v4
      #   with:
      #     check_name: Android (${{ inputs.android-api-level }}) e2e Test Report
      #     report_paths: 'e2e/test-results/junit.xml'
      - name: 'Upload Android E2E Artifacts'
        if: failure() || cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ inputs.android-api-level }}-e2e-artifact
          path: apps/example/e2e/artifacts
      - name: 'Upload Android E2E HTML Report'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ inputs.android-api-level }}-e2e-test-report
          path: apps/example/e2e/test-results
